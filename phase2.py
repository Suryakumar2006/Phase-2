# -*- coding: utf-8 -*-
"""phase2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jk8PggVqW0jyUdIOtxSCBTAJz7QRx9fR
"""

# Importing necessary libraries
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split
from surprise import accuracy
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load the MovieLens dataset (prebuilt dataset in Surprise)
data = Dataset.load_builtin('ml-100k')  # MovieLens 100k dataset
trainset, testset = train_test_split(data, test_size=0.2)

# Use Singular Value Decomposition (SVD) for collaborative filtering
algo = SVD()
algo.fit(trainset)
predictions = algo.test(testset)

# Evaluate the performance (RMSE)
rmse = accuracy.rmse(predictions)
print(f"RMSE of the model: {rmse:.4f}")

# Visualizing prediction errors (differences between predicted and actual ratings)
errors = [pred.est - pred.r_ui for pred in predictions]
plt.figure(figsize=(8, 6))
plt.hist(errors, bins=20, color='skyblue', edgecolor='black')
plt.title("Prediction Errors Distribution (SVD)")
plt.xlabel("Prediction Error")
plt.ylabel("Frequency")
plt.show()

# Example movie data (movieId, title, description)
movies = pd.DataFrame({
    'movieId': [1, 2, 3, 4],
    'title': ['Toy Story', 'Jumanji', 'The Lion King', 'The Matrix'],
    'description': [
        'A toy cowboy embarks on adventures with his toy friends.',
        'A magical board game brings toys to life.',
        'A lion prince overcomes adversity to become king.',
        'A computer hacker learns the truth about his reality.'
    ]
})

# Initialize the TF-IDF Vectorizer
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['description'])

# Calculate cosine similarity between all movies
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Plotting the cosine similarity matrix using Seaborn
plt.figure(figsize=(8, 6))
sns.heatmap(cosine_sim, annot=True, xticklabels=movies['title'], yticklabels=movies['title'], cmap='coolwarm', linewidths=0.5)
plt.title("Cosine Similarity Between Movies (Content-Based)")
plt.show()

# Hybrid Recommendation Function
def hybrid_recommendation(user_id, movie_id, movies, algo, cosine_sim):
    # Collaborative Filtering Prediction
    collaborative_pred = algo.predict(str(user_id), str(movie_id)).est

    # Content-Based Filtering Recommendation
    idx = movies[movies['movieId'] == movie_id].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:4]  # Top 3 most similar movies
    content_recommendations = [movies['title'].iloc[i[0]] for i in sim_scores]

    # Hybrid Output
    print(f"Collaborative Filtering Prediction: {collaborative_pred:.2f}")
    print("Content-Based Filtering Recommendations:")
    for movie in content_recommendations:
        print(movie)

# Example: Recommend movies for User 1 based on movieId 1 (Toy Story)
hybrid_recommendation(user_id=1, movie_id=1, movies=movies, algo=algo, cosine_sim=cosine_sim)

# Bar plot of recommended movies
recommended_movies = ['The Lion King', 'Jumanji', 'Toy Story']
plt.figure(figsize=(8, 5))
plt.barh(recommended_movies, [1, 2, 3], color='skyblue')
plt.xlabel('Recommendation Score (ranked)')
plt.title('Top Movie Recommendations')
plt.show()